language: cpp
compiler: gcc
# command to install dependencies
install: 

  # Enabling the NSLS-II EPICS debian package repositories
  - curl http://epics.nsls2.bnl.gov/debian/repo-key.pub | sudo apt-key add -
  - echo "deb http://epics.nsls2.bnl.gov/debian/ wheezy main contrib" | sudo tee -a /etc/apt/sources.list
  - echo "deb-src http://epics.nsls2.bnl.gov/debian/ wheezy main contrib" | sudo tee -a /etc/apt/sources.list

  # Installing the latest 3rd party packages: EPICS, hdf5, tiff, etc.
  - sudo apt-get update -qq
  - sudo apt-get install epics-dev libhdf5-serial-dev libtiff-dev libxml2-dev libboost-test-dev

  # Fetch and build latest EPICS synApps modules
  - sh travis-build-external-deps.sh

  # Generate the configure/RELEASE.local and configure/CONFIG_SITE.linux-x86_64.Common
  # with the details of where to find various external libraries.
  - echo "EPICS_BASE=/usr/lib/epics" >>           configure/RELEASE.local
  - echo "HDF5=/usr" >>                           configure/CONFIG_SITE.linux-x86_64.Common
  - echo "HDF5_LIB=/usr/lib" >>                   configure/CONFIG_SITE.linux-x86_64.Common
  - echo "HDF5_INCLUDE=-I/usr/include" >>         configure/CONFIG_SITE.linux-x86_64.Common
  - echo "XML2_INCLUDE=-I/usr/include/libxml2" >> configure/CONFIG_SITE.linux-x86_64.Common
  - echo "BOOST=/usr" >>                          configure/CONFIG_SITE.linux-x86_64.Common
  - echo "BOOST_LIB=/usr/lib" >>                  configure/CONFIG_SITE.linux-x86_64.Common
  - echo "BOOST_INCLUDE=/usr/include" >>          configure/CONFIG_SITE.linux-x86_64.Common

  - echo "ASYN=`pwd`/external/asyn4-26"        >> configure/RELEASE.local
  - echo "BUSY=`pwd`/external/busy-1-6-1"      >> configure/RELEASE.local
  - echo "CALC=`pwd`/external/calc-3-4-2"      >> configure/RELEASE.local
  - echo "SSCAN=`pwd`/external/sscan-2-10"     >> configure/RELEASE.local
  - echo "AUTOSAVE=`pwd`/external/autosave-5-5" >> configure/RELEASE.local

  # Configure the example IOCs in preparation for build
  - echo "BUILD_IOCS=YES" >> configure/CONFIG_SITE.linux-x86_64.Common
  - cp configure/RELEASE.local                    iocs/simDetectorIOC/configure/
  - cp configure/CONFIG_SITE.linux-x86_64.Common  iocs/simDetectorIOC/configure/
  - echo "ADCORE=`pwd`">>                         iocs/simDetectorIOC/configure/RELEASE.local
  - cp configure/RELEASE.local                    iocs/simDetectorNoIOC/configure/
  - cp configure/CONFIG_SITE.linux-x86_64.Common  iocs/simDetectorNoIOC/configure/
  - echo "ADCORE=`pwd`">>                         iocs/simDetectorNoIOC/configure/RELEASE.local

  # Run the build
  - EPICS_BASE=/usr/lib/epics EPICS_CA_HOST_ARCH=linux-x86_64 make

  # Build the simDetectorIOC only. The new simDetectorNoIOC cannot be built as asyn 4-23
  # from the NSLS-II repo does not have the asynPortClient class.
  #- EPICS_BASE=/usr/lib/epics EPICS_CA_HOST_ARCH=linux-x86_64 make -C iocs/simDetectorIOC

# Finally run the tests
script:
  - ls -al lib/*
  - ls -al bin/*
  #- ./bin/linux-x86_64/test_big_classic testbigclassic.cdf
  - ./bin/linux-x86_64/plugin-test --log_level=test_suite

